// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CLSSContentSchedulerSTT_API.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CLSSContentSchedulerSTT_API.Models
{
    public partial class ClssContentSchedulerSTTContext
    {
        private IClssContentSchedulerSTTContextProcedures _procedures;

        public virtual IClssContentSchedulerSTTContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ClssContentSchedulerSTTContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IClssContentSchedulerSTTContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SPChannelsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPChanneltoUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPUserChannelMapResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPUserChannelPopupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPUsertoChannelResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPUserTypeMasterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SPUserValidationResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ClssContentSchedulerSTTContextProcedures : IClssContentSchedulerSTTContextProcedures
    {
        private readonly ClssContentSchedulerSTTContext _context;

        public ClssContentSchedulerSTTContextProcedures(ClssContentSchedulerSTTContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SPChannelsResult>> SPChannelsAsync(string ActionType, int? ChannelId, string ChannelName, int? ChannelCode, string ChannelDescription, byte[] ChannelLogo, int? CompanyId, int? ActiveStatus, string LicenseCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ActionType",
                    Size = 20,
                    Value = ActionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChannelId",
                    Value = ChannelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChannelName",
                    Size = 50,
                    Value = ChannelName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChannelCode",
                    Value = ChannelCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChannelDescription",
                    Size = 50,
                    Value = ChannelDescription ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChannelLogo",
                    Size = -1,
                    Value = ChannelLogo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ActiveStatus",
                    Value = ActiveStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LicenseCode",
                    Value = LicenseCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPChannelsResult>("EXEC @returnValue = [dbo].[SPChannels] @ActionType, @ChannelId, @ChannelName, @ChannelCode, @ChannelDescription, @ChannelLogo, @CompanyId, @ActiveStatus, @LicenseCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPChanneltoUserResult>> SPChanneltoUserAsync(int? ChannelId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChannelId",
                    Value = ChannelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPChanneltoUserResult>("EXEC @returnValue = [dbo].[SPChanneltoUser] @ChannelId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPUserChannelMapResult>> SPUserChannelMapAsync(int? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPUserChannelMapResult>("EXEC @returnValue = [dbo].[SPUserChannelMap] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPUserChannelPopupResult>> SPUserChannelPopupAsync(int? Userid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Userid",
                    Value = Userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPUserChannelPopupResult>("EXEC @returnValue = [dbo].[SPUserChannelPopup] @Userid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPUsertoChannelResult>> SPUsertoChannelAsync(int? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPUsertoChannelResult>("EXEC @returnValue = [dbo].[SPUsertoChannel] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPUserTypeMasterResult>> SPUserTypeMasterAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPUserTypeMasterResult>("EXEC @returnValue = [dbo].[SPUserTypeMaster]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SPUserValidationResult>> SPUserValidationAsync(string UserName, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 100,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 100,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPUserValidationResult>("EXEC @returnValue = [dbo].[SPUserValidation] @UserName, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
